A Tree is a hierarchical data structure that consists of nodes connected by edges. It's widely used in computer science for organizing 
data in a hierarchical way, such as files on a system or the structure of a website.

1. Here are some key terms:

Node: A node represents a data element in the tree.
Root: The topmost node of the tree (the starting point).
Parent: A node that has one or more child nodes.
Child: A node that is a descendant of another node.
Leaf Node: A node that does not have any children (end nodes).
Edge: A connection between two nodes.
Height of a Tree: The length of the longest path from the root to a leaf.
Depth of a Node: The number of edges from the root to that node.


2. Types of Trees
Here are some common types of trees:

Binary Tree: Each node has at most two children.
Binary Search Tree (BST): A special type of binary tree where for each node, the left child is smaller, and the right child is larger.
AVL Tree: A self-balancing binary search tree.
Heap: A binary tree used for implementing priority queues, where the root is either the maximum (max-heap) or minimum (min-heap).
Trie: A tree used for storing strings in a way that allows for efficient prefix searching.
N-ary Tree: A tree where each node can have at most N children.

BST
A Binary Search Tree (BST) is a binary tree with the additional condition that:

The left subtree of a node contains only nodes with values less than the node’s value.
The right subtree of a node contains only nodes with values greater than the node’s value
        8
       / \
      3   10
     / \    \
    1   6    14
       /  \   /
      4    7 13


Binary Tree Traversal
Traversal is the process of visiting all the nodes in the tree in a specific order. There are three common types of tree traversal:

1. Inorder Traversal: Visit the left subtree, then the node, and finally the right subtree (Left-> root-> Right).
For BST, this results in visiting the nodes in sorted order.

2. Preorder Traversal: Visit the node first, then the left subtree, and finally the right subtree (root-> Left-> Right).

3. Postorder Traversal: Visit the left subtree first, then the right subtree, and finally the node (Left-> Right-> Root).


Number of ways BinaryTree can be constructed/OOPs concept
1. Node Class as a Separate Class Outside BinaryTree Class (Already Discussed)
This is where Node is just a regular, independent class, completely separate from the BinaryTree class. You don't need to reference any 
instance of BinaryTree to create a Node.

2. Node Class as a Static Class Inside BinaryTree Class (Already Discussed)
The Node class is a static inner class inside BinaryTree. This means you don't need an instance of BinaryTree to instantiate a Node.

3. Node Class as a Non-Static Class Inside BinaryTree Class (Already Discussed)
In this case, Node is an inner non-static class, so you must reference an instance of BinaryTree to create an instance of Node. This is the 
approach where you use tree.new Node(...).

4. Interface or Abstract Class: Use an interface or abstract class for the node, which can then be implemented by concrete node classes, 
offering more flexibility for complex data structures.
These five approaches cover the major ways to organize the Node class in Java. The first three are the most commonly used in binary tree 
implementations.


In the LL (Linked List) class, the Node class is an inner class, but the main class LL doesn’t depend on an instance of LL to create Node 
objects. This is because we are not trying to use an instance of LL to create a Node (like we did with tree.new Node()), and Node doesn’t 
require access to an instance of LL to function. It is simpler since we’re creating nodes in a single linked list where the Node class is 
just a container for storing data and a reference to the next node.
In contrast, in the BinaryTree example, we are creating a tree structure where Node references the parent (root), so we need to associate 
the Node with the BinaryTree instance.