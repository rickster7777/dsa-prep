Index used in for loop should be should be an integer it can't be double/float.

Accessing the Node Class: The Node class is declared as an inner class inside BinaryTree1, so you should instantiate it using 
BinaryTree1.Node (or make it a static inner class if you want to instantiate it without the outer class instance).

Inner Class: The Node class is defined as an inner class within BinaryTree1. To instantiate it, you need an instance of the outer BinaryTree1 class, so we use 
tree.new Node() to create nodes.
tree.root = tree.new Node(1);   // Instantiate Node correctly
tree.root.left = tree.new Node(2);
tree.root.right = tree.new Node(3);


Difference Between Static and Non-Static Inner Classes:
Non-static Inner Class: It holds an implicit reference to the outer class. Thus, you need an instance of the outer class to create an 
instance of the inner class.

Static Inner Class: It doesn't hold an implicit reference to the outer class, so you can instantiate it without needing an outer class 
instance. You can just do new Node() directly.

Number of ways BinaryTree can be constructed/OOPs concept
1. Node Class as a Separate Class Outside BinaryTree Class (Already Discussed)
This is where Node is just a regular, independent class, completely separate from the BinaryTree class. You don't need to reference any 
instance of BinaryTree to create a Node.

2. Node Class as a Static Class Inside BinaryTree Class (Already Discussed)
The Node class is a static inner class inside BinaryTree. This means you don't need an instance of BinaryTree to instantiate a Node.

3. Node Class as a Non-Static Class Inside BinaryTree Class (Already Discussed)
In this case, Node is an inner non-static class, so you must reference an instance of BinaryTree to create an instance of Node. This is the 
approach where you use tree.new Node(...).

4. Interface or Abstract Class: Use an interface or abstract class for the node, which can then be implemented by concrete node classes, 
offering more flexibility for complex data structures.
These five approaches cover the major ways to organize the Node class in Java. The first three are the most commonly used in binary tree 
implementations.

Why doesn't the tree.new Node(1) approach apply in your LL code?
The reason you don’t need the tree.new Node(1) approach in the LL class is because:

In the LL (Linked List) class, the Node class is an inner class, but the main class LL doesn’t depend on an instance of LL to create Node 
objects. This is because we are not trying to use an instance of LL to create a Node (like we did with tree.new Node()), and Node doesn’t 
require access to an instance of LL to function. It is simpler since we’re creating nodes in a single linked list where the Node class is 
just a container for storing data and a reference to the next node.
In contrast, in the BinaryTree example, we are creating a tree structure where Node references the parent (root), so we need to associate 
the Node with the BinaryTree instance.


WHEN TO USE ABSTRACT CLASS, INTERFACE, NON STATIC INNER CLASS, STATIC INNER CLASS

1. Abstract Classes
An abstract class is a class that cannot be instantiated on its own but can be subclassed. 

It’s used when:
Common functionality needs to be shared across different subclasses.
You want to provide default behavior for some methods but leave others to be implemented by subclasses (abstract methods).
You want to share state (fields) or behavior (methods) across multiple related classes.

When to Use Abstract Classes:
Shared implementation: If you have multiple classes that share common code or behavior and some methods need to be implemented differently in subclasses.
Common base class: If the class hierarchy has common attributes or methods that subclasses can use, while still enforcing certain methods to be implemented by each subclass (via abstract methods).
Partially implemented class: If you want to provide default behavior but leave room for customization by subclasses.

2. Interfaces
An interface defines a contract that must be fulfilled by implementing classes. It only contains abstract methods 
(until Java 8, when default methods were introduced) and constants. 

Interfaces are used when:
You want to define a contract for classes to implement.
You want to allow multiple inheritance (since Java doesn’t support multiple inheritance with classes, but you can implement multiple interfaces).
You are working with polymorphism where you don't care about the class but care about the behavior defined by the interface.

When to Use Interfaces:
Behavior specification: When you need a way to define common behaviors without forcing a common implementation, especially when the implementing classes are not related.
Multiple inheritance: If you need to inherit behavior from multiple sources (since a class can implement multiple interfaces).
Loose coupling: If you want to provide flexibility and ensure loose coupling between components.

3. Inner Classes (Non-static)
A non-static inner class is associated with an instance of the outer class. It has access to all members of the outer class, including 
private ones. 

Use non-static inner classes when:
You want an inner class to interact with the instance fields of the enclosing class.
The inner class should only exist in the context of an instance of the outer class.
The inner class makes more sense to be tightly coupled with the outer class, and its functionality is closely related to the outer class.

When to Use Non-static Inner Classes:
When the inner class depends on the instance of the outer class and needs to access its members.
When the inner class is not meant to be used independently but rather as a helper to the outer class.

4. Static Inner Classes
A static inner class is independent of the outer class instance and does not have access to instance variables of the outer class. 

You would use it when:
The inner class doesn’t need access to the outer class’s instance fields and methods.
The inner class is logically tied to the outer class but does not require access to the outer class's non-static members.
You need to encapsulate logic that is relevant only in the context of the outer class but doesn’t depend on the outer class’s instance.

When to Use Static Inner Classes:
When the inner class is self-contained and doesn’t need access to the outer class instance.
When you want to group helper classes logically inside another class but without the dependency on the outer class’s instance.


| Approach                   | When to Use                                                                                                   | Example Use Case                                           |
|----------------------------|--------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
| **Abstract Class**          | - Shared functionality among subclasses. <br> - Partially implemented class, with some methods abstract.     | - Vehicle base class (common attributes and methods).      |
| **Interface**               | - Defining a contract for behavior. <br> - Allowing multiple inheritance. <br> - Decoupling components.       | - Drivable interface for various vehicles (car, bike).     |
| **Non-static Inner Class** | - Tightly coupled to the instance of the outer class. <br> - Needs access to outer class instance variables. | - Node class inside a BinaryTree class (access to tree state).|
| **Static Inner Class**      | - Independent of the outer class instance. <br> - Used for grouping related functionality without state dependency. | - Helper class for tree traversal or node management.      |


GEMINI: TEACH ME ABOUT STATIC CLASS AND METHODS/FUNCTIONS FROM SCRATCH

1. What are Static Members?
In essence: Static members belong to the class itself, not to individual objects of that class.

Think of it this way:
Imagine a blueprint for a house (the class).
Non-static members (instance members) are like features specific to each individual house built from that blueprint 
(e.g., color, furniture).

Static members are like features common to all houses built from that blueprint (e.g., number of floors, architectural style).


5. When to Use Static Members
Utility methods: When you need general-purpose functions that don't rely on specific object data.
Global counters or settings: When you need a single shared value across all instances of a class or even across the entire application.
Factory methods: Methods that create and return objects of a class, often with specific configurations.


6. Benefits
Improved code organization: Group related utility functions together.
Enhanced code reusability: Avoid code duplication by using static methods for common tasks.
Improved performance: In some cases, static methods can be slightly more efficient than instance methods.


7. Key Considerations
Careful use: Overuse of static members can lead to less flexible and harder-to-test code.
Testing: Static methods can be more challenging to unit test because they don't rely on specific object instances.

Key Points in Java:
No true static classes: As mentioned earlier, Java doesn't allow you to directly declare a class as "static."
Utility classes: The closest concept in Java is to create a class with only static members (methods and fields). Such 
classes are often called "utility classes" or "helper classes."

Examples:
Math class: Contains static methods like sqrt(), pow(), sin(), etc.
Arrays class: Provides static methods for array manipulation like sort(), copyOf(), binarySearch(), etc.
Collections class: Offers static methods for collections like sort(), reverse(), shuffle(), etc.

public class StringUtils { 

    public static boolean isEmpty(String str) {
        return str == null || str.trim().isEmpty();
    }

    public static String reverse(String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        StringBuilder sb = new StringBuilder(str);
        return sb.reverse().toString();
    }
}

How to use:
String name = "John Doe";
boolean isEmpty = StringUtils.isEmpty(name); // false

String reversedName = StringUtils.reverse(name); // "eoD nhoJ"

Important Considerations in Java:

Static fields:
Can be accessed directly using the class name: ClassName.staticFieldName
Example: Math.PI

Static blocks:
Code within a static block is executed only once when the class is first loaded.
Often used for initialization of static fields.

public class MyClass {
    private static final int MAX_VALUE; 

    static {
        MAX_VALUE = 100; 
        System.out.println("Static block executed."); 
    }

    // ... other methods ...
}

29 Jan 2025
In Java, static is a keyword that can be used with variables, methods, blocks, and nested classes. It makes the member (variable or method) 
belong to the class itself rather than to instances (objects) of that class. This means you can access static members without creating an 
object of the class.


1. Static Variables
A static variable is shared by all instances of a class. It is initialized only once when the class is loaded into memory, and it retains its 
value across all instances of the class.

class Counter {
    static int count = 0;

    Counter() {
        count++;
    }

    void display() {
        System.out.println("Count: " + count);
    }
}

public class Main {
    public static void main(String[] args) {
        Counter obj1 = new Counter();
        Counter obj2 = new Counter();
        obj1.display(); // Count: 2
        obj2.display(); // Count: 2
    }
}



2. Static Methods
A static method can be called without creating an object of the class. It can only directly access other static members 
(variables or methods) of the class. Static methods cannot access instance variables or instance methods.

Example:
class MathOperations {
    static int add(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        int result = MathOperations.add(5, 3);
        System.out.println("Result: " + result); // Result: 8
    }
}


In Java, static is a keyword that can be used with variables, methods, blocks, and nested classes. It makes the member (variable or method) belong to the class itself rather than to instances (objects) of that class. This means you can access static members without creating an object of the class.

Here’s a breakdown of how static works in Java:

1. Static Variables
A static variable is shared by all instances of a class. It is initialized only once when the class is loaded into memory, and it retains its value across all instances of the class.

Example:

class Counter {
    static int count = 0;

    Counter() {
        count++;
    }

    void display() {
        System.out.println("Count: " + count);
    }
}

public class Main {
    public static void main(String[] args) {
        Counter obj1 = new Counter();
        Counter obj2 = new Counter();
        obj1.display(); // Count: 2
        obj2.display(); // Count: 2
    }
}
In this example, both obj1 and obj2 share the same count variable.

2. Static Methods
A static method can be called without creating an object of the class. It can only directly access other static members (variables or methods) of the class. Static methods cannot access instance variables or instance methods.

Example:

class MathOperations {
    static int add(int a, int b) {
        return a + b;
    }
}

public class Main {
    public static void main(String[] args) {
        int result = MathOperations.add(5, 3);
        System.out.println("Result: " + result); // Result: 8
    }
}


3. Static Blocks
Static blocks are used for static initialization of a class. They are executed only once, when the class is first loaded into memory.

Example:
class Initialization {
    static {
        System.out.println("Static block executed");
    }
}

public class Main {
    public static void main(String[] args) {
        new Initialization(); // Static block will be executed upon class loading
    }
}


4. Static Nested Classes
A static nested class is a nested class that is declared static. Unlike regular inner classes, static nested classes do not need an 
instance of the outer class to be created.

Example:
class Outer {
    static class Nested {
        void show() {
            System.out.println("Inside static nested class");
        }
    }
}

public class Main {
    public static void main(String[] args) {
        Outer.Nested nestedObj = new Outer.Nested();
        nestedObj.show(); // Inside static nested class
    }
}

Key Points:
Static variables are shared across all instances of a class.
Static methods can be called without an object and can only access other static members.
Static blocks are used for initialization code that should only run once when the class is loaded.
Static nested classes do not need an instance of the outer class.
