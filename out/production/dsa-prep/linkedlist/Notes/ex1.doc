Linked is not stored in a contiguous location.

LL can increase/decrease in size.

In LL along with data next is also stored which is the location of the next element and for the last element is pointed to the null.

At application level itâ€™s used in browsers because n number of forwards and backwards can be done with this.

In questions related to array they ask you to return the array but in question related to LL they usually ask for the starting point.


Basic Operations on Linked Lists:
Traversal: Moving through the list, node by node, starting from the head.
Insertion: Adding a new node at the beginning, end, or in the middle of the list.
Deletion: Removing a node from the list (from the beginning, middle, or end).
Searching: Finding a node with a specific value.
Reversing: Changing the order of nodes in the list.


Advantages of Linked Lists
Dynamic Size: Unlike arrays, linked lists do not require a predefined size. You can easily grow or shrink the list.
Efficient Insertions/Deletions: Inserting or deleting elements at the beginning or middle of the list can be done in constant time, O(1), if the position is known.

Disadvantages of Linked Lists
Extra Memory: Each node requires extra memory for the pointer to the next node.
Random Access is Not Possible: To access an element, you have to traverse the list from the head to the desired node, making it slower than an array for direct access.