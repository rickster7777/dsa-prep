Example Execution:
Let's walk through a quick example with nums = [1, 2, 3]:
Initial call: solve([1, 2, 3], [], 0, [])
Start with an empty subset output = [] and index 0.
Exclude nums[0] = 1:
Call solve([1, 2, 3], [], 1, []), i.e., skip 1 and move to the next element.
Exclude nums[1] = 2:
Call solve([1, 2, 3], [], 2, []), i.e., skip 2 and move to the next element.
Exclude nums[2] = 3:
Call solve([1, 2, 3], [], 3, []), 
add [] to ans (empty set).

Backtrack: Return to solve([1, 2, 3], [], 2, []).
Include nums[2] = 3:
Call solve([1, 2, 3], [3], 3, []), 
add [3] to ans.

Backtrack: Return to solve([1, 2, 3], [], 2, []).
Backtrack to solve([1, 2, 3], [], 1, []), and repeat for including nums[1].
Eventually, all possible subsets of [1, 2, 3] will be generated and added to ans.

[ [], [ 3 ], [ 2 ], [ 2, 3 ], [ 1 ], [ 1, 3 ], [ 1, 2 ], [ 1, 2, 3 ] ]



1. solve([1, 2, 3], [], 0, [])  
2. solve([1, 2, 3], [], 1, [])  
3. solve([1, 2, 3], [], 2, [])  
4. solve([1, 2, 3], [], 3, []) -> Add [] to ans  

5. solve([1, 2, 3], [3], 3, []) -> Add [3] to ans
  
6. solve([1, 2, 3], [2], 3, []) -> Add [2] to ans
  
7. solve([1, 2, 3], [2, 3], 3, []) -> Add [2, 3] to ans
  
8. solve([1, 2, 3], [1], 2, [])  

9. solve([1, 2, 3], [1], 3, []) -> Add [1] to ans  

10. solve([1, 2, 3], [1, 3], 3, []) -> Add [1, 3] to ans  
11. solve([1, 2, 3], [1, 2], 3, []) -> Add [1, 2] to ans  
12. solve([1, 2, 3], [1, 2, 3], 3, []) -> Add [1, 2, 3] to ans  

[ [], [ 3 ], [ 2 ], [ 2, 3 ], [ 1 ], [ 1, 3 ], [ 1, 2 ], [ 1, 2, 3 ] ]




node ./subset.js
exc -> [] 1 ans-> []
exc -> [] 2 ans-> []
exc -> [] 3 ans-> []
op -> []
op-push -> 3
inc -> [ 3 ] 3 ans-> [ [] ]
op -> [ 3 ]
backtrack-> [ 3 ]
op-push -> 2
inc -> [ 2 ] 2 ans-> [ [], [ 3 ] ]
exc -> [ 2 ] 3 ans-> [ [], [ 3 ] ]
op -> [ 2 ]
op-push -> 3
inc -> [ 2, 3 ] 3 ans-> [ [], [ 3 ], [ 2 ] ]
op -> [ 2, 3 ]
backtrack-> [ 2, 3 ]
backtrack-> [ 2 ]
op-push -> 1
inc -> [ 1 ] 1 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ] ]
exc -> [ 1 ] 2 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ] ]
exc -> [ 1 ] 3 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ] ]
op -> [ 1 ]
op-push -> 3
inc -> [ 1, 3 ] 3 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ], [ 1 ] ]
op -> [ 1, 3 ]
backtrack-> [ 1, 3 ]
op-push -> 2
inc -> [ 1, 2 ] 2 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ], [ 1 ], [ 1, 3 ] ]
exc -> [ 1, 2 ] 3 ans-> [ [], [ 3 ], [ 2 ], [ 2, 3 ], [ 1 ], [ 1, 3 ] ]
op -> [ 1, 2 ]
op-push -> 3
inc -> [ 1, 2, 3 ] 3 ans-> [
  [],       [ 3 ],
  [ 2 ],    [ 2, 3 ],
  [ 1 ],    [ 1, 3 ],
  [ 1, 2 ]
]
op -> [ 1, 2, 3 ]
backtrack-> [ 1, 2, 3 ]
backtrack-> [ 1, 2 ]
backtrack-> [ 1 ]
[
  [],       [ 3 ],
  [ 2 ],    [ 2, 3 ],
  [ 1 ],    [ 1, 3 ],
  [ 1, 2 ], [ 1, 2, 3 ]
]